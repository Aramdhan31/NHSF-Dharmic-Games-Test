"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { 
  Trophy, 
  Users, 
  Calendar, 
  Clock, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Settings,
  Play,
  Pause,
  RotateCcw,
  Zap,
  Target,
  Award,
  Crown,
  Star,
  TrendingUp,
  Calendar as CalendarIcon,
  Timer,
  UserCheck,
  UserX,
  Bell,
  Mail,
  MessageSquare,
  BarChart3,
  Filter,
  Download,
  Upload,
  RefreshCw
} from "lucide-react"
import { realtimeDbUtils } from "@/lib/firebase-utils"

interface Tournament {
  id: string
  name: string
  type: 'knockout' | 'league' | 'mixed'
  status: 'draft' | 'active' | 'completed' | 'paused'
  startDate: string
  endDate: string
  maxTeams: number
  currentTeams: number
  zones: string[]
  sports: string[]
  autoForfeitMinutes: number
  semiFinalists: number
  createdAt: string
}

interface Fixture {
  id: string
  tournamentId: string
  round: number
  matchNumber: number
  team1: string
  team2: string
  sport: string
  venue: string
  scheduledDate: string
  scheduledTime: string
  status: 'scheduled' | 'live' | 'completed' | 'forfeit'
  winner?: string
  score?: string
  forfeitReason?: string
  autoGenerated: boolean
}

interface Team {
  id: string
  name: string
  zone: string
  university: string
  players: string[]
  contactEmail: string
  contactPhone: string
  registeredAt: string
  status: 'active' | 'withdrawn' | 'disqualified'
}

interface TournamentAutomationProps {
  currentZone?: string
}

export function TournamentAutomation({ currentZone }: TournamentAutomationProps) {
  const [tournaments, setTournaments] = useState<Tournament[]>([])
  const [fixtures, setFixtures] = useState<Fixture[]>([])
  const [teams, setTeams] = useState<Team[]>([])
  const [loading, setLoading] = useState(false)
  const [selectedTournament, setSelectedTournament] = useState<string>('')
  const [activeTab, setActiveTab] = useState('overview')
  const [notifications, setNotifications] = useState<any[]>([])

  // Tournament creation form
  const [tournamentForm, setTournamentForm] = useState({
    name: '',
    type: 'knockout' as 'knockout' | 'league' | 'mixed',
    startDate: '',
    endDate: '',
    maxTeams: 16,
    zones: [] as string[],
    sports: [] as string[],
    autoForfeitMinutes: 15,
    semiFinalists: 4
  })

  const tournamentTypes = [
    { value: 'knockout', label: 'Knockout Tournament', description: 'Single elimination bracket' },
    { value: 'league', label: 'League Tournament', description: 'Round-robin format' },
    { value: 'mixed', label: 'Mixed Format', description: 'League + Knockout phases' }
  ]

  const zones = [
    { value: 'LZ', label: 'London Zone' },
    { value: 'SZ', label: 'South Zone' },
    { value: 'CZ', label: 'Central Zone' },
    { value: 'NZ', label: 'North Zone' },
    { value: 'LZ+SZ', label: 'London & South Zone (Combined)', isCombined: true },
    { value: 'NZ+CZ', label: 'North & Central Zone (Combined)', isCombined: true }
  ]

  const sports = [
    { value: 'netball', label: 'Netball' },
    { value: 'kabaddi', label: 'Kabaddi' },
    { value: 'football', label: 'Football' },
    { value: 'kho kho', label: 'Kho kho' },
    { value: 'badminton', label: 'Badminton' }
  ]

  // Predefined zonal tournaments
  const predefinedZonalTournaments = [
    {
      name: 'North & Central Zone Tournament',
      type: 'mixed' as const,
      startDate: '2025-11-22',
      endDate: '2025-11-22',
      maxTeams: 20,
      zones: ['NZ+CZ'],
      sports: ['netball', 'kabaddi', 'football', 'kho kho', 'badminton'],
      autoForfeitMinutes: 15,
      semiFinalists: 4,
      description: 'North & Central Zone combined tournament on November 22, 2025'
    },
    {
      name: 'London & South Zone Tournament',
      type: 'mixed' as const,
      startDate: '2025-11-23',
      endDate: '2025-11-23',
      maxTeams: 20,
      zones: ['LZ+SZ'],
      sports: ['netball', 'kabaddi', 'football', 'kho kho', 'badminton'],
      autoForfeitMinutes: 15,
      semiFinalists: 4,
      description: 'London & South Zone combined tournament on November 23, 2025'
    }
  ]

  // Load tournaments
  const loadTournaments = async () => {
    try {
      setLoading(true)
      const result = await realtimeDbUtils.getData('tournaments')
      if (result.success && result.data) {
        const tournamentsData = Array.isArray(result.data) 
          ? result.data 
          : Object.entries(result.data).map(([id, tournament]: [string, any]) => ({ id, ...tournament }))
        setTournaments(tournamentsData)
      }
    } catch (error) {
      console.error('Error loading tournaments:', error)
    } finally {
      setLoading(false)
    }
  }

  // Load fixtures for selected tournament
  const loadFixtures = async (tournamentId: string) => {
    try {
      const result = await realtimeDbUtils.getData(`tournaments/${tournamentId}/fixtures`)
      if (result.success && result.data) {
        const fixturesData = Array.isArray(result.data) 
          ? result.data 
          : Object.entries(result.data).map(([id, fixture]: [string, any]) => ({ id, ...fixture }))
        setFixtures(fixturesData)
      }
    } catch (error) {
      console.error('Error loading fixtures:', error)
    }
  }

  // Load teams for selected tournament
  const loadTeams = async (tournamentId: string) => {
    try {
      const result = await realtimeDbUtils.getData(`tournaments/${tournamentId}/teams`)
      if (result.success && result.data) {
        const teamsData = Array.isArray(result.data) 
          ? result.data 
          : Object.entries(result.data).map(([id, team]: [string, any]) => ({ id, ...team }))
        setTeams(teamsData)
      }
    } catch (error) {
      console.error('Error loading teams:', error)
    }
  }

  // Create predefined zonal tournaments
  const createPredefinedZonalTournaments = async () => {
    try {
      setLoading(true)
      
      for (const tournament of predefinedZonalTournaments) {
        // Handle combined zones for zonal tournaments
        let processedZones = [...tournament.zones];
        const combinedZoneMap: { [key: string]: string[] } = {
          'LZ+SZ': ['LZ', 'SZ'],
          'NZ+CZ': ['NZ', 'CZ']
        };
        
        // Expand combined zones to their component zones
        const expandedZones: string[] = [];
        for (const zone of processedZones) {
          if (combinedZoneMap[zone]) {
            expandedZones.push(...combinedZoneMap[zone]);
          } else {
            expandedZones.push(zone);
          }
        }
        
        const tournamentData = {
          ...tournament,
          zones: expandedZones,
          originalZones: tournament.zones, // Keep original selection for display
          status: 'draft',
          currentTeams: 0,
          createdAt: new Date().toISOString()
        }

        await realtimeDbUtils.pushData('tournaments', tournamentData)
      }
      
      loadTournaments()
    } catch (error) {
      console.error('Error creating predefined tournaments:', error)
    } finally {
      setLoading(false)
    }
  }

  // Create new tournament
  const createTournament = async () => {
    try {
      setLoading(true)
      
      // Handle combined zones for zonal tournaments
      let processedZones = [...tournamentForm.zones];
      const combinedZoneMap: { [key: string]: string[] } = {
        'LZ+SZ': ['LZ', 'SZ'],
        'NZ+CZ': ['NZ', 'CZ']
      };
      
      // Expand combined zones to their component zones
      const expandedZones: string[] = [];
      for (const zone of processedZones) {
        if (combinedZoneMap[zone]) {
          expandedZones.push(...combinedZoneMap[zone]);
        } else {
          expandedZones.push(zone);
        }
      }
      
      const tournamentData = {
        ...tournamentForm,
        zones: expandedZones,
        originalZones: tournamentForm.zones, // Keep original selection for display
        status: 'draft',
        currentTeams: 0,
        createdAt: new Date().toISOString()
      }

      const result = await realtimeDbUtils.pushData('tournaments', tournamentData)
      if (result.success) {
        setTournamentForm({
          name: '',
          type: 'knockout',
          startDate: '',
          endDate: '',
          maxTeams: 16,
          zones: [],
          sports: [],
          autoForfeitMinutes: 15,
          semiFinalists: 4
        })
        loadTournaments()
      }
    } catch (error) {
      console.error('Error creating tournament:', error)
    } finally {
      setLoading(false)
    }
  }

  // Generate fixtures automatically
  const generateFixtures = async (tournamentId: string) => {
    try {
      setLoading(true)
      const tournament = tournaments.find(t => t.id === tournamentId)
      if (!tournament) return

      const tournamentTeams = teams.filter(t => t.tournamentId === tournamentId)
      if (tournamentTeams.length < 2) {
        alert('Need at least 2 teams to generate fixtures')
        return
      }

      const fixtures: Fixture[] = []
      let matchNumber = 1

      if (tournament.type === 'knockout') {
        // Generate knockout fixtures
        const rounds = Math.ceil(Math.log2(tournamentTeams.length))
        let currentTeams = [...tournamentTeams]
        
        for (let round = 1; round <= rounds; round++) {
          const matchesInRound = Math.ceil(currentTeams.length / 2)
          
          for (let match = 0; match < matchesInRound; match++) {
            const team1 = currentTeams[match * 2]
            const team2 = currentTeams[match * 2 + 1]
            
            if (team1 && team2) {
              fixtures.push({
                id: `fixture_${tournamentId}_${round}_${match}`,
                tournamentId,
                round,
                matchNumber: matchNumber++,
                team1: team1.name,
                team2: team2.name,
                sport: tournament.sports[0] || 'football',
                venue: 'Main Arena',
                scheduledDate: tournament.startDate,
                scheduledTime: '10:00',
                status: 'scheduled',
                autoGenerated: true
              })
            }
          }
          
          // For next round, we'll have half the teams (winners)
          currentTeams = currentTeams.slice(0, Math.ceil(currentTeams.length / 2))
        }
      } else if (tournament.type === 'league') {
        // Generate round-robin fixtures
        for (let i = 0; i < tournamentTeams.length; i++) {
          for (let j = i + 1; j < tournamentTeams.length; j++) {
            fixtures.push({
              id: `fixture_${tournamentId}_league_${i}_${j}`,
              tournamentId,
              round: 1,
              matchNumber: matchNumber++,
              team1: tournamentTeams[i].name,
              team2: tournamentTeams[j].name,
              sport: tournament.sports[0] || 'football',
              venue: 'Main Arena',
              scheduledDate: tournament.startDate,
              scheduledTime: '10:00',
              status: 'scheduled',
              autoGenerated: true
            })
          }
        }
      }

      // Save fixtures to database
      for (const fixture of fixtures) {
        await realtimeDbUtils.pushData(`tournaments/${tournamentId}/fixtures`, fixture)
      }

      loadFixtures(tournamentId)
    } catch (error) {
      console.error('Error generating fixtures:', error)
    } finally {
      setLoading(false)
    }
  }

  // Handle automatic forfeits
  const checkForForfeits = async (tournamentId: string) => {
    try {
      const tournament = tournaments.find(t => t.id === tournamentId)
      if (!tournament) return

      const currentFixtures = fixtures.filter(f => f.tournamentId === tournamentId && f.status === 'scheduled')
      const now = new Date()
      const forfeitThreshold = tournament.autoForfeitMinutes

      for (const fixture of currentFixtures) {
        const scheduledDateTime = new Date(`${fixture.scheduledDate}T${fixture.scheduledTime}`)
        const timeDiff = (now.getTime() - scheduledDateTime.getTime()) / (1000 * 60) // minutes

        if (timeDiff > forfeitThreshold) {
          // Auto-forfeit the match
          await realtimeDbUtils.updateData(`tournaments/${tournamentId}/fixtures/${fixture.id}`, {
            status: 'forfeit',
            forfeitReason: 'Team did not show up within allowed time',
            winner: fixture.team1, // Default winner
            score: '1-0 (Forfeit)'
          })

          // Send notification
          addNotification({
            type: 'forfeit',
            message: `${fixture.team1} wins by forfeit against ${fixture.team2}`,
            timestamp: new Date().toISOString()
          })
        }
      }

      loadFixtures(tournamentId)
    } catch (error) {
      console.error('Error checking forfeits:', error)
    }
  }

  // Select semi-finalists from multiple leagues
  const selectSemiFinalists = async (tournamentId: string) => {
    try {
      const tournament = tournaments.find(t => t.id === tournamentId)
      if (!tournament) return

      // Get all completed matches
      const completedFixtures = fixtures.filter(f => f.tournamentId === tournamentId && f.status === 'completed')
      
      // Calculate points for each team
      const teamPoints: { [teamName: string]: number } = {}
      
      completedFixtures.forEach(fixture => {
        if (!teamPoints[fixture.team1]) teamPoints[fixture.team1] = 0
        if (!teamPoints[fixture.team2]) teamPoints[fixture.team2] = 0
        
        if (fixture.winner === fixture.team1) {
          teamPoints[fixture.team1] += 3
        } else if (fixture.winner === fixture.team2) {
          teamPoints[fixture.team2] += 3
        } else {
          // Draw
          teamPoints[fixture.team1] += 1
          teamPoints[fixture.team2] += 1
        }
      })

      // Sort teams by points and select top semi-finalists
      const sortedTeams = Object.entries(teamPoints)
        .sort(([,a], [,b]) => b - a)
        .slice(0, tournament.semiFinalists)
        .map(([teamName]) => teamName)

      // Create semi-final fixtures
      const semiFinalFixtures: Fixture[] = []
      for (let i = 0; i < sortedTeams.length; i += 2) {
        if (sortedTeams[i + 1]) {
          semiFinalFixtures.push({
            id: `semi_${tournamentId}_${i/2 + 1}`,
            tournamentId,
            round: 999, // Semi-final round
            matchNumber: i/2 + 1,
            team1: sortedTeams[i],
            team2: sortedTeams[i + 1],
            sport: tournament.sports[0] || 'football',
            venue: 'Main Arena',
            scheduledDate: tournament.endDate,
            scheduledTime: '14:00',
            status: 'scheduled',
            autoGenerated: true
          })
        }
      }

      // Save semi-final fixtures
      for (const fixture of semiFinalFixtures) {
        await realtimeDbUtils.pushData(`tournaments/${tournamentId}/fixtures`, fixture)
      }

      addNotification({
        type: 'semi_finalists',
        message: `Semi-finalists selected: ${sortedTeams.join(', ')}`,
        timestamp: new Date().toISOString()
      })

      loadFixtures(tournamentId)
    } catch (error) {
      console.error('Error selecting semi-finalists:', error)
    }
  }

  // Add notification
  const addNotification = (notification: any) => {
    setNotifications(prev => [notification, ...prev.slice(0, 9)]) // Keep last 10
  }

  // Send automated notifications
  const sendNotifications = async (type: 'email' | 'sms' | 'push', message: string, recipients: string[]) => {
    try {
      // This would integrate with your notification service
      console.log(`Sending ${type} notification:`, message, 'to:', recipients)
      
      addNotification({
        type: 'notification_sent',
        message: `${type.toUpperCase()} sent to ${recipients.length} recipients`,
        timestamp: new Date().toISOString()
      })
    } catch (error) {
      console.error('Error sending notifications:', error)
    }
  }

  useEffect(() => {
    loadTournaments()
  }, [])

  useEffect(() => {
    if (selectedTournament) {
      loadFixtures(selectedTournament)
      loadTeams(selectedTournament)
    }
  }, [selectedTournament])

  // Auto-check for forfeits every minute
  useEffect(() => {
    if (selectedTournament) {
      const interval = setInterval(() => {
        checkForForfeits(selectedTournament)
      }, 60000) // Check every minute

      return () => clearInterval(interval)
    }
  }, [selectedTournament, fixtures])

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Tournament Automation</h2>
          <p className="text-gray-600">Automated tournament management with fixture generation and forfeit handling</p>
        </div>
        <div className="flex gap-2">
          <Button onClick={() => loadTournaments()} variant="outline" size="sm">
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
        </div>
      </div>

      {/* Key Features Overview */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-3">
              <div className="h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <Calendar className="h-6 w-6 text-blue-600" />
              </div>
              <div>
                <h3 className="font-semibold">Auto Fixtures</h3>
                <p className="text-sm text-gray-600">Generate fixtures automatically</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-3">
              <div className="h-12 w-12 bg-red-100 rounded-lg flex items-center justify-center">
                <XCircle className="h-6 w-6 text-red-600" />
              </div>
              <div>
                <h3 className="font-semibold">Auto Forfeits</h3>
                <p className="text-sm text-gray-600">Handle no-shows automatically</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-3">
              <div className="h-12 w-12 bg-green-100 rounded-lg flex items-center justify-center">
                <Trophy className="h-6 w-6 text-green-600" />
              </div>
              <div>
                <h3 className="font-semibold">Semi-Finalists</h3>
                <p className="text-sm text-gray-600">Auto-select from leagues</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="tournaments">Tournaments</TabsTrigger>
          <TabsTrigger value="fixtures">Fixtures</TabsTrigger>
          <TabsTrigger value="automation">Automation</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          {/* Active Tournaments */}
          <Card>
            <CardHeader>
              <CardTitle>Active Tournaments</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {tournaments.filter(t => t.status === 'active').map(tournament => (
                  <div key={tournament.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div>
                      <h3 className="font-semibold">{tournament.name}</h3>
                      <p className="text-sm text-gray-600">{tournament.type} • {tournament.currentTeams}/{tournament.maxTeams} teams</p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline">{tournament.status}</Badge>
                      <Button size="sm" onClick={() => setSelectedTournament(tournament.id)}>
                        Manage
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Recent Notifications */}
          <Card>
            <CardHeader>
              <CardTitle>Recent Activity</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {notifications.slice(0, 5).map((notification, index) => (
                  <div key={index} className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                    <div className="h-8 w-8 bg-blue-100 rounded-full flex items-center justify-center">
                      <Bell className="h-4 w-4 text-blue-600" />
                    </div>
                    <div className="flex-1">
                      <p className="text-sm font-medium">{notification.message}</p>
                      <p className="text-xs text-gray-500">{new Date(notification.timestamp).toLocaleString()}</p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="tournaments" className="space-y-4">
          {/* Create Tournament Form */}
          <Card>
            <CardHeader>
              <CardTitle>Create New Tournament</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="name">Tournament Name</Label>
                  <Input
                    id="name"
                    value={tournamentForm.name}
                    onChange={(e) => setTournamentForm({ ...tournamentForm, name: e.target.value })}
                    placeholder="Enter tournament name"
                  />
                </div>
                <div>
                  <Label htmlFor="type">Tournament Type</Label>
                  <Select value={tournamentForm.type} onValueChange={(value: any) => setTournamentForm({ ...tournamentForm, type: value })}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {tournamentTypes.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="startDate">Start Date</Label>
                  <Input
                    id="startDate"
                    type="date"
                    value={tournamentForm.startDate}
                    onChange={(e) => setTournamentForm({ ...tournamentForm, startDate: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="endDate">End Date</Label>
                  <Input
                    id="endDate"
                    type="date"
                    value={tournamentForm.endDate}
                    onChange={(e) => setTournamentForm({ ...tournamentForm, endDate: e.target.value })}
                  />
                </div>
                <div>
                  <Label htmlFor="maxTeams">Max Teams</Label>
                  <Input
                    id="maxTeams"
                    type="number"
                    value={tournamentForm.maxTeams}
                    onChange={(e) => setTournamentForm({ ...tournamentForm, maxTeams: parseInt(e.target.value) })}
                  />
                </div>
                <div>
                  <Label htmlFor="autoForfeit">Auto Forfeit (minutes)</Label>
                  <Input
                    id="autoForfeit"
                    type="number"
                    value={tournamentForm.autoForfeitMinutes}
                    onChange={(e) => setTournamentForm({ ...tournamentForm, autoForfeitMinutes: parseInt(e.target.value) })}
                  />
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-4">
                <Button onClick={createTournament} disabled={loading} className="flex-1">
                {loading ? 'Creating...' : 'Create Tournament'}
              </Button>
                <Button 
                  onClick={createPredefinedZonalTournaments} 
                  disabled={loading}
                  variant="outline"
                  className="flex-1"
                >
                  {loading ? 'Creating...' : 'Create Zonal Tournaments'}
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Tournaments List */}
          <Card>
            <CardHeader>
              <CardTitle>All Tournaments</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {tournaments.map(tournament => (
                  <div key={tournament.id} className="flex items-center justify-between p-4 border rounded-lg">
                    <div>
                      <h3 className="font-semibold">{tournament.name}</h3>
                      <p className="text-sm text-gray-600">
                        {tournament.type} • {tournament.currentTeams}/{tournament.maxTeams} teams • 
                        {tournament.zones.length} zones • {tournament.sports.length} sports
                      </p>
                      <p className="text-xs text-gray-500">
                        {tournament.startDate} to {tournament.endDate}
                      </p>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant={tournament.status === 'active' ? 'default' : 'secondary'}>
                        {tournament.status}
                      </Badge>
                      <Button size="sm" onClick={() => setSelectedTournament(tournament.id)}>
                        Select
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="fixtures" className="space-y-4">
          {selectedTournament ? (
            <>
              {/* Fixture Management */}
              <Card>
                <CardHeader>
                  <CardTitle>Fixture Management</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex gap-2 mb-4">
                    <Button onClick={() => generateFixtures(selectedTournament)}>
                      <Calendar className="h-4 w-4 mr-2" />
                      Generate Fixtures
                    </Button>
                    <Button onClick={() => checkForForfeits(selectedTournament)} variant="outline">
                      <XCircle className="h-4 w-4 mr-2" />
                      Check Forfeits
                    </Button>
                    <Button onClick={() => selectSemiFinalists(selectedTournament)} variant="outline">
                      <Trophy className="h-4 w-4 mr-2" />
                      Select Semi-Finalists
                    </Button>
                  </div>
                  
                  <div className="space-y-3">
                    {fixtures.map(fixture => (
                      <div key={fixture.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                        <div>
                          <h4 className="font-medium">{fixture.team1} vs {fixture.team2}</h4>
                          <p className="text-sm text-gray-600">
                            Round {fixture.round} • {fixture.sport} • {fixture.scheduledDate} {fixture.scheduledTime}
                          </p>
                          {fixture.forfeitReason && (
                            <p className="text-xs text-red-600">Forfeit: {fixture.forfeitReason}</p>
                          )}
                        </div>
                        <div className="flex items-center space-x-2">
                          <Badge variant={
                            fixture.status === 'completed' ? 'default' :
                            fixture.status === 'live' ? 'secondary' :
                            fixture.status === 'forfeit' ? 'destructive' : 'outline'
                          }>
                            {fixture.status}
                          </Badge>
                          {fixture.autoGenerated && (
                            <Badge variant="outline" className="text-xs">Auto</Badge>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </>
          ) : (
            <Card>
              <CardContent className="p-8 text-center">
                <Trophy className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-600 mb-2">Select a Tournament</h3>
                <p className="text-gray-500">Choose a tournament to manage fixtures</p>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="automation" className="space-y-4">
          {/* Automation Settings */}
          <Card>
            <CardHeader>
              <CardTitle>Automation Settings</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Auto Forfeit Time (minutes)</Label>
                  <Input type="number" defaultValue="15" />
                  <p className="text-xs text-gray-500">Teams will be forfeited if they don't show up within this time</p>
                </div>
                <div className="space-y-2">
                  <Label>Semi-Finalists Count</Label>
                  <Input type="number" defaultValue="4" />
                  <p className="text-xs text-gray-500">Number of teams to advance to semi-finals</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Notification Settings */}
          <Card>
            <CardHeader>
              <CardTitle>Notification Settings</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">Email Notifications</h4>
                    <p className="text-sm text-gray-600">Send match reminders and updates via email</p>
                  </div>
                  <Button variant="outline" size="sm">
                    <Mail className="h-4 w-4 mr-2" />
                    Configure
                  </Button>
                </div>
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">SMS Notifications</h4>
                    <p className="text-sm text-gray-600">Send urgent updates via SMS</p>
                  </div>
                  <Button variant="outline" size="sm">
                    <MessageSquare className="h-4 w-4 mr-2" />
                    Configure
                  </Button>
                </div>
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">Push Notifications</h4>
                    <p className="text-sm text-gray-600">Send real-time updates to mobile apps</p>
                  </div>
                  <Button variant="outline" size="sm">
                    <Bell className="h-4 w-4 mr-2" />
                    Configure
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
